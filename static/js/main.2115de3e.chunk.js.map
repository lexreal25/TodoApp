{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listitems","items","map","item","className","key","type","id","value","text","onChange","e","editItem","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","newItems","filteredItems","filter","onSubmit","this","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAKe,SAASA,EAAUC,GAC9B,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BAEA,2BAAOC,KAAK,OACRC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAW,SAACC,GAAD,OAAOZ,EAAMa,SAASD,EAAEE,OAAOL,MAAOL,EAAKE,QAEtD,8BACI,kBAAC,IAAD,CAAiBD,UAAU,SAASU,KAAK,QACzCC,QAAU,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAKtD,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC/BlB,I,mBCpBbmB,IAAQC,IAAIC,K,IAmFGC,E,kDAhFb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IAURwB,YAAc,SAACZ,GACb,EAAKa,SAAS,CAACC,YAAY,CACzBhB,KAAME,EAAEE,OAAOL,MACfH,IAAKqB,KAAKC,UAdI,EAkBlBC,QAAU,SAACjB,GACTA,EAAEkB,iBACF,IAAMC,EAAU,EAAKC,MAAMN,YAC3B,GAAmB,KAAhBK,EAAQrB,KAAW,CACpB,IAAMuB,EAAS,GAAD,mBAAK,EAAKD,MAAM9B,OAAhB,CAAuB6B,IACrC,EAAKN,SAAS,CACZvB,MAAO+B,EACPP,YAAY,CACVhB,KAAK,GACLJ,IAAI,QA3BM,EAkClBW,WAAW,SAACX,GACV,IAAM4B,EAAgB,EAAKF,MAAM9B,MAAMiC,QAAO,SAAA/B,GAAI,OAChDA,EAAKE,MAAOA,KACZ,EAAKmB,SAAS,CACZvB,MAAOgC,KAtCK,EA2ClBrB,SAAW,SAACH,EAAMJ,GAChB,IAAMJ,EAAQ,EAAK8B,MAAM9B,MACzBA,EAAMC,KAAI,SAAAC,GAIR,OAHGA,EAAKE,MAAQA,IACdF,EAAKM,KAAOA,GAEP,QAET,EAAKe,SAAS,CACZvB,MAAQA,KAlDV,EAAK8B,MAAM,CACT9B,MAAM,GACNwB,YAAY,CACVhB,KAAK,GACLJ,IAAI,KANQ,E,qDAyDhB,OACE,yBAAKD,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAa4B,SAAUC,KAAKR,SACnC,2BACEtB,KAAK,OACL+B,YAAY,aACZ7B,MAAO4B,KAAKL,MAAMN,YAAYhB,KAC9BC,SAAU0B,KAAKb,cAGjB,4BAAQjB,KAAK,UAAb,SAGJ,kBAACR,EAAD,CAAWG,MAAOmC,KAAKL,MAAM9B,MAC3Be,WAAYoB,KAAKpB,WACjBJ,SAAYwB,KAAKxB,gB,GA1ET0B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2115de3e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './List.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move' //react animation \r\n\r\nexport default function ListItems(props) {\r\n    const items = props.items\r\n    const listitems = items.map(item =>{\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>{/*{item.text} converting this into input field to \r\n            make the text editable*/ } \r\n            <input type='text'\r\n                id={item.key} \r\n                value={item.text}\r\n                onChange={ (e) => props.editItem(e.target.value, item.key)}\r\n            />\r\n                <span>\r\n                    <FontAwesomeIcon className='faicon' icon='trash'\r\n                    onClick={ () => props.deleteItem(item.key)}/>\r\n                </span>\r\n            </p>\r\n        </div>\r\n    })\r\n    return (\r\n        <div>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n            {listitems}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css'; \nimport ListItems from './ListItems';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport{faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash);\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state={\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n  }\n\n  handleInput = (e) => {\n    this.setState({currentItem:{\n      text: e.target.value,\n      key: Date.now()\n    }})\n  }\n\n  addItem = (e) => {\n    e.preventDefault()\n    const newItem = this.state.currentItem\n    if(newItem.text !==''){\n      const newItems=[...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n    }\n  }\n\n  //funtion to delete item\n  deleteItem=(key)=>{\n    const filteredItems = this.state.items.filter(item =>\n      item.key !==key)\n      this.setState({\n        items: filteredItems\n      })\n  }\n\n  //function to edit item\n  editItem = (text, key) =>{\n    const items = this.state.items;\n    items.map(item =>{\n      if(item.key === key){\n        item.text = text\n      }\n      return null;\n    })\n    this.setState({\n      items : items\n    })\n  }\n\n  render(){\n    return(\n      <div className='App'>  \n        <header>\n          <form id='to-do-form' onSubmit={this.addItem}>\n            <input \n              type='text' \n              placeholder='Enter Text'\n              value={this.state.currentItem.text}\n              onChange={this.handleInput}\n            />\n\n            <button type='submit'>Add</button>\n          </form>\n        </header>\n        <ListItems items={this.state.items} \n          deleteItem={this.deleteItem}\n          editItem = {this.editItem}/>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}